{"version":3,"file":"slowingDownRotation.esm.min.js","sources":["../lib/slowingDownRotation.js"],"sourcesContent":["const defaultProperty = {\r\n  currentPlayCount: null,\r\n  playCount: null,\r\n  currentIndex : 0,\r\n  stopIndex: null,\r\n  slowDownStartindex : null,\r\n\r\n  isSlowdown : false,\r\n  isPlay: false,\r\n  isStop : false,\r\n  \r\n  countTimer: null,\r\n}\r\n\r\nconst defaultSetting = {\r\n  wrapperElement : null,\r\n  targetElement : null,\r\n  itemElements : null,\r\n  speed: 100,\r\n  stopIndex : 0,\r\n  playCount: 3,\r\n  autoStart: false,\r\n  stopCallback: () => {},\r\n  startCallback: () => {},\r\n  slowDownCallback: () => {}\r\n};\r\n\r\nexport default class SlowingDownRotation {\r\n  constructor(options) {\r\n    this.updateOption(options);\r\n  }\r\n\r\n  init() {\r\n    const { options } = this;\r\n\r\n    if(options.autoStart) {\r\n      this.start();\r\n    }\r\n  }\r\n\r\n  updateOption(options) {\r\n    Object.assign(this, {\r\n      options: Object.assign({}, defaultProperty, defaultSetting, options)\r\n    })\r\n  }\r\n\r\n  start() {\r\n    const { options } = this;\r\n\r\n    if(options.countTimer) {\r\n      clearTimeout(options.countTimer)\r\n    }\r\n    \r\n    if(!options.isPlay) {\r\n      options.isPlay = true;\r\n    }\r\n\r\n    options.startCallback();\r\n\r\n    this.roll(options.playCount, options.speed);\r\n  }\r\n\r\n  stop() {\r\n    const { options } = this;\r\n\r\n    if (!options.isSlowdown) {\r\n      if(options.countTimer) {\r\n        clearTimeout(options.countTimer)\r\n      }\r\n\r\n      options.stopCallback();\r\n\r\n      if (options.itemElements.length >= options.stopIndex && options.stopIndex >= 0) {\r\n        options.isSlowdown = true;\r\n        options.currentPlayCount = 0;\r\n        options.itemElements[options.currentIndex].classList.remove('is-active');\r\n        this.roll(Math.max(1, Math.ceil(20 / options.itemElements.length)), options.speed);\r\n        options.slowDownCallback();\r\n      }\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    const { options } = this;\r\n    options.playCount = defaultProperty.playCount;\r\n    options.currentIndex = defaultProperty.currentIndex;\r\n    options.slowDownStartindex = defaultProperty.slowDownStartindex;\r\n    options.isSlowdown = defaultProperty.isSlowdown;\r\n    options.isStop = defaultProperty.isStop;\r\n\r\n    if(options.countTimer) {\r\n      clearTimeout(options.countTimer);\r\n      options.countTimer = null;\r\n    }\r\n  }\r\n\r\n  roll(_count, _speed) {\r\n    const { options } = this;\r\n\r\n    if (options.isSlowdown) {\r\n      if (options.currentPlayCount > _count && options.currentIndex-1 === options.stopIndex) {\r\n        this.reset();\r\n        return;\r\n      }\r\n      _speed = Math.floor(_speed + (_count * (options.currentIndex * options.currentPlayCount)));\r\n    } else {\r\n      if (options.currentPlayCount > _count) {\r\n        this.stop();\r\n        return;\r\n      }\r\n    }\r\n    this.output();\r\n\r\n    options.currentIndex++;\r\n\r\n    if(options.currentIndex >= options.itemElements.length) {\r\n      options.currentIndex = 0;\r\n      options.currentPlayCount++;\r\n    }\r\n\r\n    options.countTimer = setTimeout(() => {\r\n      this.roll(_count, _speed)\r\n    }, _speed);\r\n  }\r\n\r\n  output() {\r\n    const { options } = this;\r\n    const activeClass = 'is-active';\r\n\r\n    let prevIndex = options.currentIndex - 1;\r\n    if(prevIndex < 0) {\r\n      prevIndex = options.itemElements.length - 1;\r\n    }\r\n    options.itemElements[prevIndex].classList.remove(activeClass);\r\n    options.itemElements[options.currentIndex].classList.add(activeClass);\r\n  }\r\n}\r\n"],"names":["defaultProperty","currentPlayCount","playCount","currentIndex","stopIndex","slowDownStartindex","isSlowdown","isPlay","isStop","countTimer","defaultSetting","wrapperElement","targetElement","itemElements","speed","autoStart","stopCallback","startCallback","slowDownCallback","SlowingDownRotation","constructor","options","this","updateOption","init","start","Object","assign","clearTimeout","roll","stop","length","classList","remove","Math","max","ceil","reset","_count","_speed","floor","output","setTimeout","activeClass","prevIndex","add"],"mappings":"AAAA,MAAMA,EAAkB,CACtBC,iBAAkB,KAClBC,UAAW,KACXC,aAAe,EACfC,UAAW,KACXC,mBAAqB,KAErBC,YAAa,EACbC,QAAQ,EACRC,QAAS,EAETC,WAAY,MAGRC,EAAiB,CACrBC,eAAiB,KACjBC,cAAgB,KAChBC,aAAe,KACfC,MAAO,IACPV,UAAY,EACZF,UAAW,EACXa,WAAW,EACXC,aAAc,OACdC,cAAe,OACfC,iBAAkB,QAGL,MAAMC,EACnBC,YAAYC,GACVC,KAAKC,aAAaF,GAGpBG,OACE,MAAMH,QAAEA,GAAYC,KAEjBD,EAAQN,WACTO,KAAKG,QAITF,aAAaF,GACXK,OAAOC,OAAOL,KAAM,CAClBD,QAASK,OAAOC,OAAO,GAAI3B,EAAiBU,EAAgBW,KAIhEI,QACE,MAAMJ,QAAEA,GAAYC,KAEjBD,EAAQZ,YACTmB,aAAaP,EAAQZ,YAGnBY,EAAQd,SACVc,EAAQd,QAAS,GAGnBc,EAAQJ,gBAERK,KAAKO,KAAKR,EAAQnB,UAAWmB,EAAQP,OAGvCgB,OACE,MAAMT,QAAEA,GAAYC,KAEfD,EAAQf,aACRe,EAAQZ,YACTmB,aAAaP,EAAQZ,YAGvBY,EAAQL,eAEJK,EAAQR,aAAakB,QAAUV,EAAQjB,WAAaiB,EAAQjB,WAAa,IAC3EiB,EAAQf,YAAa,EACrBe,EAAQpB,iBAAmB,EAC3BoB,EAAQR,aAAaQ,EAAQlB,cAAc6B,UAAUC,OAAO,aAC5DX,KAAKO,KAAKK,KAAKC,IAAI,EAAGD,KAAKE,KAAK,GAAKf,EAAQR,aAAakB,SAAUV,EAAQP,OAC5EO,EAAQH,qBAKdmB,QACE,MAAMhB,QAAEA,GAAYC,KACpBD,EAAQnB,UAAYF,EAAgBE,UACpCmB,EAAQlB,aAAeH,EAAgBG,aACvCkB,EAAQhB,mBAAqBL,EAAgBK,mBAC7CgB,EAAQf,WAAaN,EAAgBM,WACrCe,EAAQb,OAASR,EAAgBQ,OAE9Ba,EAAQZ,aACTmB,aAAaP,EAAQZ,YACrBY,EAAQZ,WAAa,MAIzBoB,KAAKS,EAAQC,GACX,MAAMlB,QAAEA,GAAYC,KAEpB,GAAID,EAAQf,WAAY,CACtB,GAAIe,EAAQpB,iBAAmBqC,GAAUjB,EAAQlB,aAAa,IAAMkB,EAAQjB,UAE1E,YADAkB,KAAKe,QAGPE,EAASL,KAAKM,MAAMD,EAAUD,GAAUjB,EAAQlB,aAAekB,EAAQpB,wBAEvE,GAAIoB,EAAQpB,iBAAmBqC,EAE7B,YADAhB,KAAKQ,OAITR,KAAKmB,SAELpB,EAAQlB,eAELkB,EAAQlB,cAAgBkB,EAAQR,aAAakB,SAC9CV,EAAQlB,aAAe,EACvBkB,EAAQpB,oBAGVoB,EAAQZ,WAAaiC,YAAW,KAC9BpB,KAAKO,KAAKS,EAAQC,KACjBA,GAGLE,SACE,MAAMpB,QAAEA,GAAYC,KACdqB,EAAc,YAEpB,IAAIC,EAAYvB,EAAQlB,aAAe,EACpCyC,EAAY,IACbA,EAAYvB,EAAQR,aAAakB,OAAS,GAE5CV,EAAQR,aAAa+B,GAAWZ,UAAUC,OAAOU,GACjDtB,EAAQR,aAAaQ,EAAQlB,cAAc6B,UAAUa,IAAIF"}