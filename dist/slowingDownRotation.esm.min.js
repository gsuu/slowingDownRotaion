const t={currentPlayCount:null,playCount:null,currentIndex:null,stopIndex:null,slowDownStartindex:null,isSlowdown:!1,isPlay:!1,isStop:!1,countTimer:null},n={wrapperElement:null,targetElement:null,itemElements:null,speed:100,stopIndex:0,playCount:3,autoStart:!1,stopCallback:()=>{},startCallback:()=>{},slowDownCallback:()=>{}};class e{constructor(e){Object.assign(this,{options:Object.assign({},t,n,e)})}init(){const{options:t}=this;t.autoStart&&this.start()}start(){const{options:t}=this;t.countTimer&&clearTimeout(t.countTimer),t.isPlay||(t.isPlay=!0),t.startCallback(),this.roll(t.playCount,t.speed)}stop(){const{options:t}=this;t.isSlowdown||(t.countTimer&&clearTimeout(t.countTimer),t.stopCallback(),t.itemElements.length>=t.stopIndex&&t.stopIndex>=0&&(t.isSlowdown=!0,t.currentPlayCount=0,this.roll(Math.max(1,Math.ceil(20/t.itemElements.length)),t.speed),t.slowDownCallback()))}reset(){const{options:n}=this;n.playCount=t.playCount,n.currentIndex=t.currentIndex,n.slowDownStartindex=t.slowDownStartindex,n.isSlowdown=t.isSlowdown,n.isStop=t.isStop,n.countTimer&&(clearTimeout(n.countTimer),n.countTimer=null)}roll(t,n){const{options:e}=this;if(e.currentIndex++,e.currentIndex>=e.itemElements.length&&(e.currentIndex=0,e.currentPlayCount++),e.isSlowdown){if(e.currentPlayCount>t&&e.currentIndex-1===e.stopIndex)return void this.reset();n=Math.floor(n+t*(e.currentIndex*e.currentPlayCount))}else if(e.currentPlayCount>t)return void this.stop();this.output(),e.countTimer=setTimeout((()=>{this.roll(t,n)}),n)}output(){const{options:t}=this,n="is-active";let e=t.currentIndex-1;e<0&&(e=t.itemElements.length-1),t.itemElements[e].classList.remove(n),t.itemElements[t.currentIndex].classList.add(n)}}export{e as default};
//# sourceMappingURL=slowingDownRotation.esm.min.js.map
